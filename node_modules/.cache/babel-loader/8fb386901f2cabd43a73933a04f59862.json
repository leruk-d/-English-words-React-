{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\nimport { observer, inject } from \"mobx-react\";\nimport ButtonSave from \"../Buttons/ButtonSave\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TableRow = inject([\"dataStore\"])(observer(_s(_ref => {\n  _s();\n\n  let {\n    dataStore,\n    ...props\n  } = _ref;\n  const [pressed, setPressed] = useState(false);\n  const [inputData, setInputData] = useState({\n    id: props.id,\n    word: props.word,\n    transcription: props.transcription,\n    translation: props.translation\n  });\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addInputData = event => {\n    setInputData({ ...inputData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const {\n    word,\n    transcription,\n    translation\n  } = inputData;\n\n  const onlyLatinCharacters = value => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = value => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(inputData.word)) {\n      setErrors({ ...errors,\n        word: \"Введите слово на английском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(inputData.translation)) {\n      setErrors({ ...errors,\n        translation: \"Введите слово на русском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      dataStore.updateWord(inputData, props.id);\n      setErrors({\n        word: false,\n        transcription: false,\n        translation: false\n      });\n      handleChange();\n    }\n  };\n\n  const handleDelete = () => dataStore.deleteWord(props.id);\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"row\",\n    children: [pressed === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: word,\n          onChange: e => addInputData(e),\n          name: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: transcription,\n          onChange: e => addInputData(e),\n          name: \"transcription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: translation,\n          onChange: e => addInputData(e),\n          name: \"translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: inputData.word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: inputData.transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: inputData.translation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonEdit, {\n          onClick: handleChange,\n          pressed: pressed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), pressed === true ? /*#__PURE__*/_jsxDEV(ButtonSave, {\n          onClick: handleSave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 33\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ButtonDel, {\n          onClick: () => handleDelete(props.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, props.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this);\n}, \"vYFgeSrj6xYZNcJU708Dz9unUH8=\")));\nexport default TableRow;","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx"],"names":["React","useState","ButtonDel","ButtonEdit","observer","inject","ButtonSave","TableRow","dataStore","props","pressed","setPressed","inputData","setInputData","id","word","transcription","translation","errors","setErrors","handleChange","addInputData","event","target","name","value","onlyLatinCharacters","test","onlyRussianCharacters","handleSave","alert","updateWord","handleDelete","deleteWord","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\nimport { observer, inject } from \"mobx-react\";\nimport ButtonSave from \"../Buttons/ButtonSave\";\n\nconst TableRow = inject([\"dataStore\"])(\n  observer(({ dataStore, ...props }) => {\n    const [pressed, setPressed] = useState(false);\n\n    const [inputData, setInputData] = useState({\n      id: props.id,\n      word: props.word,\n      transcription: props.transcription,\n      translation: props.translation,\n    });\n\n    const [errors, setErrors] = useState({\n      word: false,\n      transcription: false,\n      translation: false,\n    });\n\n    const handleChange = () => {\n      setPressed(!pressed);\n    };\n\n    const addInputData = (event) => {\n      setInputData({\n        ...inputData,\n        [event.target.name]: event.target.value,\n      });\n    };\n\n    const { word, transcription, translation } = inputData;\n\n    const onlyLatinCharacters = (value) => {\n      return /^[a-zA-Z]+$/.test(value);\n    };\n\n    const onlyRussianCharacters = (value) => {\n      return /^[\\u0400-\\u04FF]+$/.test(value);\n    };\n\n    const handleSave = () => {\n      if (!onlyLatinCharacters(inputData.word)) {\n        setErrors({ ...errors, word: \"Введите слово на английском языке\" });\n        alert(\"Некоторые поля заполнены неправильно!\");\n      } else if (!onlyRussianCharacters(inputData.translation)) {\n        setErrors({ ...errors, translation: \"Введите слово на русском языке\" });\n        alert(\"Некоторые поля заполнены неправильно!\");\n      } else {\n        dataStore.updateWord(inputData, props.id);\n        setErrors({\n          word: false,\n          transcription: false,\n          translation: false,\n        });\n        handleChange();\n      }\n    };\n    const handleDelete = () => dataStore.deleteWord(props.id);\n\n    return (\n      <tr className=\"row\" key={props.id}>\n        {pressed === true ? (\n          <>\n            <td>\n              <input\n                className=\"row-input\"\n                type=\"text\"\n                value={word}\n                onChange={(e) => addInputData(e)}\n                name=\"word\"\n              />\n            </td>\n            <td>\n              <input\n                className=\"row-input\"\n                type=\"text\"\n                value={transcription}\n                onChange={(e) => addInputData(e)}\n                name=\"transcription\"\n              />\n            </td>\n            <td>\n              <input\n                className=\"row-input\"\n                type=\"text\"\n                value={translation}\n                onChange={(e) => addInputData(e)}\n                name=\"translation\"\n              />\n            </td>\n          </>\n        ) : (\n          <>\n            <td className=\"row-word\" onClick={handleChange}>\n              {inputData.word}\n            </td>\n            <td className=\"row-word\" onClick={handleChange}>\n              {inputData.transcription}\n            </td>\n            <td className=\"row-word\" onClick={handleChange}>\n              {inputData.translation}\n            </td>\n          </>\n        )}\n        <td>\n          <div className=\"buttons\">\n            <ButtonEdit onClick={handleChange} pressed={pressed} />\n            {pressed === true ? <ButtonSave onClick={handleSave} /> : \"\"}\n            <ButtonDel onClick={() => handleDelete(props.id)} />\n          </div>\n        </td>\n      </tr>\n    );\n  })\n);\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}