{"ast":null,"code":"import _initializerDefineProperty from \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;\n\nimport { action, observable } from \"mobx\";\nlet DataStore = (_class = class DataStore {\n  constructor() {\n    _initializerDefineProperty(this, \"data\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"isLoading\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"error\", _descriptor3, this);\n\n    this.loadData = () => {\n      fetch(\"http://itgirlschool.justmakeit.ru/api/words\").then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      });\n    };\n\n    _initializerDefineProperty(this, \"updateData\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"addWord\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"removeWord\", _descriptor6, this);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"error\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"updateData\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.isLoading = true;\n      this.loadData().then(data => {\n        this.data = data;\n        this.isLoading = false;\n      }).catch(error => {\n        this.setIsLoading(false);\n        this.setError(error);\n      });\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"addWord\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return (inputData, setInputData) => {\n      fetch(\"/api/words/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify({\n          english: inputData.word,\n          russian: inputData.translation,\n          transcription: inputData.transcription,\n          tags: []\n        })\n      }).then(response => {\n        setInputData({\n          word: \" \",\n          translation: \" \",\n          transcription: \"\"\n        });\n\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(this.setErrors({\n        word: false,\n        transcription: false,\n        translation: false\n      })).catch(err => console.log(err));\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"removeWord\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return index => {\n      return this.data.splice(index, 1);\n    };\n  }\n})), _class);\nexport default DataStore;","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/stores/DataStore.js"],"names":["action","observable","DataStore","loadData","fetch","then","response","ok","json","Error","isLoading","data","catch","error","setIsLoading","setError","inputData","setInputData","method","headers","body","JSON","stringify","english","word","russian","translation","transcription","tags","setErrors","err","console","log","index","splice"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,MAAnC;IAEMC,S,aAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA;;AAAA;;AAAA;;AAAA,SAKdC,QALc,GAKH,MAAM;AACfC,MAAAA,KAAK,CAAC,6CAAD,CAAL,CAAqDC,IAArD,CAA2DC,QAAD,IAAc;AACtE,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf;AACA,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAHD,MAGO;AACL,gBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,OAPD;AAQD,KAda;;AAAA;;AAAA;;AAAA;AAAA;;AAAA,C,sEACbR,U;;;;;WAAkB,E;;6EAClBA,U;;;;;WAAuB,K;;yEACvBA,U;;;;;WAAmB,I;;8EAanBD,M;;;;;WAAoB,MAAM;AACzB,WAAKU,SAAL,GAAiB,IAAjB;AACA,WAAKP,QAAL,GACGE,IADH,CACSM,IAAD,IAAU;AACd,aAAKA,IAAL,GAAYA,IAAZ;AACA,aAAKD,SAAL,GAAiB,KAAjB;AACD,OAJH,EAKGE,KALH,CAKUC,KAAD,IAAW;AAChB,aAAKC,YAAL,CAAkB,KAAlB;AACA,aAAKC,QAAL,CAAcF,KAAd;AACD,OARH;AASD,K;;2EAEAb,M;;;;;WACS,CAACgB,SAAD,EAAYC,YAAZ,KAA6B;AACrCb,MAAAA,KAAK,CAAC,gBAAD,EAAmB;AACtBc,QAAAA,MAAM,EAAE,MADc;AAEtBC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFa;AAKtBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,OAAO,EAAEP,SAAS,CAACQ,IADA;AAEnBC,UAAAA,OAAO,EAAET,SAAS,CAACU,WAFA;AAGnBC,UAAAA,aAAa,EAAEX,SAAS,CAACW,aAHN;AAInBC,UAAAA,IAAI,EAAE;AAJa,SAAf;AALgB,OAAnB,CAAL,CAYGvB,IAZH,CAYSC,QAAD,IAAc;AAClBW,QAAAA,YAAY,CAAC;AACXO,UAAAA,IAAI,EAAE,GADK;AAEXE,UAAAA,WAAW,EAAE,GAFF;AAGXC,UAAAA,aAAa,EAAE;AAHJ,SAAD,CAAZ;;AAKA,YAAIrB,QAAQ,CAACC,EAAb,EAAiB;AACf;AACA,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAHD,MAGO;AACL,gBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,OAxBH,EAyBGJ,IAzBH,CA0BI,KAAKwB,SAAL,CAAe;AACbL,QAAAA,IAAI,EAAE,KADO;AAEbG,QAAAA,aAAa,EAAE,KAFF;AAGbD,QAAAA,WAAW,EAAE;AAHA,OAAf,CA1BJ,EAgCGd,KAhCH,CAgCUkB,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAhClB;AAiCD,K;;8EAEA9B,M;;;;;WAAqBiC,KAAD,IAAW;AAC9B,aAAO,KAAKtB,IAAL,CAAUuB,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB,CAAP;AACD,K;;;AAEH,eAAe/B,SAAf","sourcesContent":["import { action, observable } from \"mobx\";\n\nclass DataStore {\n  @observable data = [];\n  @observable isLoading = false;\n  @observable error = null;\n\n  loadData = () => {\n    fetch(\"http://itgirlschool.justmakeit.ru/api/words\").then((response) => {\n      if (response.ok) {\n        //Проверяем что код ответа 200\n        return response.json();\n      } else {\n        throw new Error(\"Something went wrong ...\");\n      }\n    });\n  };\n\n  @action updateData = () => {\n    this.isLoading = true;\n    this.loadData()\n      .then((data) => {\n        this.data = data;\n        this.isLoading = false;\n      })\n      .catch((error) => {\n        this.setIsLoading(false);\n        this.setError(error);\n      });\n  };\n\n  @action\n  addWord = (inputData, setInputData) => {\n    fetch(\"/api/words/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify({\n        english: inputData.word,\n        russian: inputData.translation,\n        transcription: inputData.transcription,\n        tags: [],\n      }),\n    })\n      .then((response) => {\n        setInputData({\n          word: \" \",\n          translation: \" \",\n          transcription: \"\",\n        });\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n      .then(\n        this.setErrors({\n          word: false,\n          transcription: false,\n          translation: false,\n        })\n      )\n      .catch((err) => console.log(err));\n  };\n\n  @action removeWord = (index) => {\n    return this.data.splice(index, 1);\n  };\n}\nexport default DataStore;\n"]},"metadata":{},"sourceType":"module"}