{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/WordsList/EditableRow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./EditableRow.scss\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonAdd from \"../Buttons/ButtonAdd\";\nimport { observer, inject } from \"mobx-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableRow = inject([\"dataStore\"])(observer(_s(_ref => {\n  _s();\n\n  let {\n    dataStore\n  } = _ref;\n  const [inputData, setInputData] = useState({\n    word: \"\",\n    transcription: \"\",\n    translation: \"\"\n  });\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false\n  });\n\n  const addInputData = event => {\n    setInputData({ ...inputData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const {\n    word,\n    transcription,\n    translation\n  } = inputData;\n\n  const onlyLatinCharacters = value => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = value => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(inputData.word)) {\n      setErrors({ ...errors,\n        word: \"Введите слово на английском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(inputData.translation)) {\n      setErrors({ ...errors,\n        translation: \"Введите слово на русском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      fetch(\"http://itgirlschool.justmakeit.ru/api/words/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify({\n          english: inputData.word,\n          russian: inputData.translation,\n          transcription: inputData.transcription,\n          tags: []\n        })\n      }).then(response => {\n        setInputData({\n          word: \" \",\n          translation: \" \",\n          transcription: \"\"\n        });\n\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(() => {\n        dataStore.loadData();\n      });\n    }\n  };\n\n  const validate = () => {\n    const {\n      word,\n      transcription,\n      translation\n    } = inputData;\n    return word.trim() && transcription.trim() && translation.trim();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"rowAddWord\",\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: word,\n        onChange: e => addInputData(e),\n        name: \"word\",\n        className: word.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: transcription,\n        onChange: e => addInputData(e),\n        name: \"transcription\",\n        className: transcription.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: translation,\n        onChange: e => addInputData(e),\n        name: \"translation\",\n        className: translation.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonAdd, {\n          disabled: !validate(),\n          save: handleSave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonDel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n}, \"R5IgjAq0s2yDKUe7bxWvMccVblw=\")));\nexport default EditableRow;","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/WordsList/EditableRow.jsx"],"names":["React","useState","ButtonDel","ButtonAdd","observer","inject","EditableRow","dataStore","inputData","setInputData","word","transcription","translation","errors","setErrors","addInputData","event","target","name","value","onlyLatinCharacters","test","onlyRussianCharacters","handleSave","alert","fetch","method","headers","body","JSON","stringify","english","russian","tags","then","response","ok","json","Error","loadData","validate","trim","e","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./EditableRow.scss\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonAdd from \"../Buttons/ButtonAdd\";\nimport { observer, inject } from \"mobx-react\";\n\nconst EditableRow = inject([\"dataStore\"])(\n  observer(({ dataStore }) => {\n    const [inputData, setInputData] = useState({\n      word: \"\",\n      transcription: \"\",\n      translation: \"\",\n    });\n\n    const [errors, setErrors] = useState({\n      word: false,\n      transcription: false,\n      translation: false,\n    });\n\n    const addInputData = (event) => {\n      setInputData({\n        ...inputData,\n        [event.target.name]: event.target.value,\n      });\n    };\n\n    const { word, transcription, translation } = inputData;\n\n    const onlyLatinCharacters = (value) => {\n      return /^[a-zA-Z]+$/.test(value);\n    };\n\n    const onlyRussianCharacters = (value) => {\n      return /^[\\u0400-\\u04FF]+$/.test(value);\n    };\n\n    const handleSave = () => {\n      if (!onlyLatinCharacters(inputData.word)) {\n        setErrors({ ...errors, word: \"Введите слово на английском языке\" });\n        alert(\"Некоторые поля заполнены неправильно!\");\n      } else if (!onlyRussianCharacters(inputData.translation)) {\n        setErrors({ ...errors, translation: \"Введите слово на русском языке\" });\n        alert(\"Некоторые поля заполнены неправильно!\");\n      } else {\n        fetch(\"http://itgirlschool.justmakeit.ru/api/words/add\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json;charset=utf-8\",\n          },\n          body: JSON.stringify({\n            english: inputData.word,\n            russian: inputData.translation,\n            transcription: inputData.transcription,\n            tags: [],\n          }),\n        })\n          .then((response) => {\n            setInputData({\n              word: \" \",\n              translation: \" \",\n              transcription: \"\",\n            });\n            if (response.ok) {\n              //Проверяем что код ответа 200\n              return response.json();\n            } else {\n              throw new Error(\"Something went wrong ...\");\n            }\n          })\n          .then(() => {\n            dataStore.loadData();\n          });\n      }\n    };\n\n    const validate = () => {\n      const { word, transcription, translation } = inputData;\n      return word.trim() && transcription.trim() && translation.trim();\n    };\n\n    return (\n      <tr className=\"rowAddWord\">\n        <td>\n          <input\n            placeholder=\"Enter\"\n            type=\"text\"\n            value={word}\n            onChange={(e) => addInputData(e)}\n            name=\"word\"\n            className={word.length ? \"addWord\" : \"addWord-red\"}\n          />\n        </td>\n        <td>\n          <input\n            placeholder=\"Enter\"\n            type=\"text\"\n            value={transcription}\n            onChange={(e) => addInputData(e)}\n            name=\"transcription\"\n            className={transcription.length ? \"addWord\" : \"addWord-red\"}\n          />\n        </td>\n        <td>\n          <input\n            placeholder=\"Enter\"\n            type=\"text\"\n            value={translation}\n            onChange={(e) => addInputData(e)}\n            name=\"translation\"\n            className={translation.length ? \"addWord\" : \"addWord-red\"}\n          />\n        </td>\n        <td>\n          <div className=\"buttons\">\n            <ButtonAdd disabled={!validate()} save={handleSave} />\n            <ButtonDel />\n          </div>\n        </td>\n      </tr>\n    );\n  })\n);\n\nexport default EditableRow;\n"]},"metadata":{},"sourceType":"module"}