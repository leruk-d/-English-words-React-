{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TableRow(props) {\n  _s();\n\n  const {\n    id\n  } = props;\n  const [pressed, setPressed] = useState(false);\n  const [imputData, setImputData] = useState({\n    word: props.word,\n    transcription: props.transcription,\n    translation: props.translation\n  });\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addImputData = event => {\n    setImputData({ ...imputData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const {\n    word,\n    transcription,\n    translation\n  } = imputData;\n\n  const onlyLatinCharacters = value => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = value => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(imputData.word)) {\n      setErrors({ ...errors,\n        word: \"Введите слово на английском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(imputData.translation)) {\n      setErrors({ ...errors,\n        translation: \"Введите слово на русском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      //     console.log(imputData.word);\n      //     console.log(imputData.transcription);\n      //     console.log(imputData.translation);\n      //     setErrors({\n      //       word: false,\n      //       transcription: false,\n      //       translation: false,\n      //     });\n      //     handleChange();\n      //   }\n      // };\n      fetch(`/api/words/${id}/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify({\n          english: imputData.english,\n          russian: imputData.russian,\n          transcription: imputData.transcription,\n          tags: []\n        })\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"row\",\n    children: [pressed === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: word,\n          onChange: e => addImputData(e),\n          name: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: transcription,\n          onChange: e => addImputData(e),\n          name: \"transcription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: translation,\n          onChange: e => addImputData(e),\n          name: \"translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: imputData.word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: imputData.transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: imputData.translation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonEdit, {\n          onClick: handleSave,\n          pressed: pressed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonDel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, props.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TableRow, \"v2ROMYDK41WCt9HwZ3sQylg1Sco=\");\n\n_c = TableRow;\nexport default TableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableRow\");","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx"],"names":["React","useState","ButtonDel","ButtonEdit","TableRow","props","id","pressed","setPressed","imputData","setImputData","word","transcription","translation","errors","setErrors","handleChange","addImputData","event","target","name","value","onlyLatinCharacters","test","onlyRussianCharacters","handleSave","alert","fetch","method","headers","body","JSON","stringify","english","russian","tags","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\n\nfunction TableRow(props) {\n  const { id } = props;\n  const [pressed, setPressed] = useState(false);\n\n  const [imputData, setImputData] = useState({\n    word: props.word,\n    transcription: props.transcription,\n    translation: props.translation,\n  });\n\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false,\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addImputData = (event) => {\n    setImputData({\n      ...imputData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const { word, transcription, translation } = imputData;\n\n  const onlyLatinCharacters = (value) => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = (value) => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(imputData.word)) {\n      setErrors({ ...errors, word: \"Введите слово на английском языке\" });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(imputData.translation)) {\n      setErrors({ ...errors, translation: \"Введите слово на русском языке\" });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      //     console.log(imputData.word);\n      //     console.log(imputData.transcription);\n      //     console.log(imputData.translation);\n      //     setErrors({\n      //       word: false,\n      //       transcription: false,\n      //       translation: false,\n      //     });\n      //     handleChange();\n      //   }\n      // };\n\n      fetch(`/api/words/${id}/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify({\n          english: imputData.english,\n          russian: imputData.russian,\n          transcription: imputData.transcription,\n          tags: [],\n        }),\n      });\n    }\n  };\n\n  return (\n    <tr className=\"row\" key={props.id}>\n      {pressed === true ? (\n        <>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={word}\n              onChange={(e) => addImputData(e)}\n              name=\"word\"\n            />\n          </td>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={transcription}\n              onChange={(e) => addImputData(e)}\n              name=\"transcription\"\n            />\n          </td>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={translation}\n              onChange={(e) => addImputData(e)}\n              name=\"translation\"\n            />\n          </td>\n        </>\n      ) : (\n        <>\n          <td className=\"row-word\" onClick={handleChange}>\n            {imputData.word}\n          </td>\n          <td className=\"row-word\" onClick={handleChange}>\n            {imputData.transcription}\n          </td>\n          <td className=\"row-word\" onClick={handleChange}>\n            {imputData.translation}\n          </td>\n        </>\n      )}\n      <td>\n        <div className=\"buttons\">\n          <ButtonEdit onClick={handleSave} pressed={pressed} />\n          <ButtonDel />\n        </div>\n      </td>\n    </tr>\n  );\n}\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}