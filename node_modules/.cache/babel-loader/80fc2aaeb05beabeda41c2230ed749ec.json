{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TableRow(props) {\n  _s();\n\n  const [pressed, setPressed] = useState(false);\n  const [imputData, setImputData] = useState({\n    word: \"props.word\",\n    transcription: props.transcription,\n    translation: props.translation\n  });\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addImputData = event => {\n    setImputData({ ...imputData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const {\n    word,\n    transcription,\n    translation\n  } = imputData;\n\n  const onlyLatinCharacters = value => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = value => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(imputData.word)) {\n      setErrors({ ...errors,\n        word: \"Введите слово на английском языке\"\n      });\n    } else if (!onlyRussianCharacters(imputData.translation)) {\n      setErrors({ ...errors,\n        translation: \"Введите слово на русском языке\"\n      });\n    } else {\n      console.log(imputData.word);\n      console.log(imputData.transcription);\n      console.log(imputData.translation);\n      setErrors({\n        word: false,\n        transcription: false,\n        translation: false\n      });\n    }\n  };\n\n  console.log(imputData);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"row\",\n    children: [pressed === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          onClick: handleChange,\n          value: word,\n          onChange: e => addImputData(e),\n          name: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          onClick: handleChange,\n          value: transcription,\n          onChange: e => addImputData(e),\n          name: \"transcription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          onClick: handleChange,\n          value: translation,\n          onChange: e => addImputData(e),\n          name: \"translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: props.word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: props.transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: props.translation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonEdit, {\n          onClick: () => {\n            handleChange();\n            handleSave();\n          },\n          pressed: pressed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonDel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, props.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TableRow, \"Bl+5lUcX16yD2sU6xG5Z6NBdd/U=\");\n\n_c = TableRow;\nexport default TableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableRow\");","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx"],"names":["React","useState","ButtonDel","ButtonEdit","TableRow","props","pressed","setPressed","imputData","setImputData","word","transcription","translation","errors","setErrors","handleChange","addImputData","event","target","name","value","onlyLatinCharacters","test","onlyRussianCharacters","handleSave","console","log","e","id"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\n\nfunction TableRow(props) {\n  const [pressed, setPressed] = useState(false);\n\n  const [imputData, setImputData] = useState({\n    word: \"props.word\",\n    transcription: props.transcription,\n    translation: props.translation,\n  });\n\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false,\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addImputData = (event) => {\n    setImputData({\n      ...imputData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const { word, transcription, translation } = imputData;\n\n  const onlyLatinCharacters = (value) => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = (value) => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(imputData.word)) {\n      setErrors({ ...errors, word: \"Введите слово на английском языке\" });\n    } else if (!onlyRussianCharacters(imputData.translation)) {\n      setErrors({ ...errors, translation: \"Введите слово на русском языке\" });\n    } else {\n      console.log(imputData.word);\n      console.log(imputData.transcription);\n      console.log(imputData.translation);\n      setErrors({\n        word: false,\n        transcription: false,\n        translation: false,\n      });\n    }\n  };\n  console.log(imputData);\n  return (\n    <tr className=\"row\" key={props.id}>\n      {pressed === true ? (\n        <>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              onClick={handleChange}\n              value={word}\n              onChange={(e) => addImputData(e)}\n              name=\"word\"\n            />\n          </td>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              onClick={handleChange}\n              value={transcription}\n              onChange={(e) => addImputData(e)}\n              name=\"transcription\"\n            />\n          </td>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              onClick={handleChange}\n              value={translation}\n              onChange={(e) => addImputData(e)}\n              name=\"translation\"\n            />\n          </td>\n        </>\n      ) : (\n        <>\n          <td className=\"row-word\" onClick={handleChange}>\n            {props.word}\n          </td>\n          <td className=\"row-word\" onClick={handleChange}>\n            {props.transcription}\n          </td>\n          <td className=\"row-word\" onClick={handleChange}>\n            {props.translation}\n          </td>\n        </>\n      )}\n      <td>\n        <div className=\"buttons\">\n          <ButtonEdit\n            onClick={() => {\n              handleChange();\n              handleSave();\n            }}\n            pressed={pressed}\n          />\n          <ButtonDel />\n        </div>\n      </td>\n    </tr>\n  );\n}\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}