{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/WordsList/EditableRow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./EditableRow.scss\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonAdd from \"../Buttons/ButtonAdd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditableRow(props) {\n  _s();\n\n  const [imputData, setImputData] = useState({\n    word: \"\",\n    transcription: \"\",\n    translation: \"\"\n  });\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false\n  });\n\n  const handleSave = () => {\n    if (!imputData.word.match(/^[A-Za-z 0-9]*$/)) {\n      setErrors({ ...errors,\n        english: \"Введите слово на английском языке\"\n      });\n    } else if (!imputData.transcription.match(/^[а-яё 0-9]+$/i)) {\n      setErrors({ ...errors,\n        russian: \"Введите слово на русском языке\"\n      });\n    } else {\n      console.log(word.value);\n    }\n  };\n\n  const addImputData = event => {\n    setImputData({ ...imputData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const {\n    word,\n    transcription,\n    translation\n  } = imputData;\n\n  let validate = () => {\n    const {\n      word,\n      transcription,\n      translation\n    } = imputData;\n\n    if (word.trim() && transcription.trim() && translation.trim()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"rowAddWord\",\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: word,\n        onChange: e => addImputData(e),\n        name: \"word\",\n        className: word.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: transcription,\n        onChange: e => addImputData(e),\n        name: \"transcription\",\n        className: transcription.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: translation,\n        onChange: e => addImputData(e),\n        name: \"translation\",\n        className: translation.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonAdd, {\n          disabled: !validate(),\n          save: handleSave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ButtonDel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}\n\n_s(EditableRow, \"T5yYFc5CLIBi2H6kHisb/CvANSM=\");\n\n_c = EditableRow;\nexport default EditableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableRow\");","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/WordsList/EditableRow.jsx"],"names":["React","useState","ButtonDel","ButtonAdd","EditableRow","props","imputData","setImputData","word","transcription","translation","errors","setErrors","handleSave","match","english","russian","console","log","value","addImputData","event","target","name","validate","trim","e","length"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"./EditableRow.scss\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonAdd from \"../Buttons/ButtonAdd\";\n\nfunction EditableRow(props) {\n  const [imputData, setImputData]=useState({\nword:\"\",\ntranscription:\"\",\ntranslation:\"\"\n  });\n\n const [errors, setErrors] = useState({\n    word: false,\n    transcription:false,\n    translation:false\n    });\n\nconst handleSave=()=>{\n  if(!imputData.word.match(/^[A-Za-z 0-9]*$/)){\n    setErrors({ ...errors, english: \"Введите слово на английском языке\" });\n        } else if (!imputData.transcription.match(/^[а-яё 0-9]+$/i)) {\n            setErrors({ ...errors, russian: \"Введите слово на русском языке\" });\n  } else {\n     console.log(word.value)\n  }\n}\n\n  const addImputData = event =>{\n     setImputData({\n    ...imputData,\n    [event.target.name]: event.target.value\n  });\n  }\n \n    const {word, transcription, translation} = imputData;\n\n\nlet validate = () => {\n     const {word, transcription, translation} = imputData;\n    if (word.trim() && transcription.trim() && translation.trim()) {\n      return true\n    }\n    return false\n  }\n  return (\n      <tr className=\"rowAddWord\">\n      <td>\n\n    <input \n    placeholder=\"Enter\" \n    type=\"text\"\n    value={word} \n    onChange={e=>addImputData(e)} \n    name=\"word\"\nclassName={word.length ? \"addWord\": \"addWord-red\"}\n    />\n     </td>\n          <td>\n          \n    <input \n    placeholder=\"Enter\" \n    type=\"text\" \n    value={transcription} \n    onChange={e=>addImputData(e)} \n    name=\"transcription\"\n    className={transcription.length ? \"addWord\" : \"addWord-red\"}\n    />\n     </td>\n          <td>\n          \n   <input  \n   placeholder=\"Enter\"  \n   type=\"text\" \n   value={translation} \n   onChange={e=>addImputData(e)} \n   name=\"translation\" \n   className={translation.length ? \"addWord\"  : \"addWord-red\"}\n   />\n     </td>\n       <td>\n        <div className=\"buttons\">\n        <ButtonAdd\ndisabled={!validate()}\nsave={handleSave}\n        />\n        <ButtonDel />\n        </div>\n      </td>\n        </tr>\n  );\n}\n\nexport default EditableRow;\n"]},"metadata":{},"sourceType":"module"}