{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TableRow(props) {\n  _s();\n\n  const [pressed, setPressed] = useState(false);\n  const [inputData, setInputData] = useState({\n    id: props.id,\n    english: props.word,\n    transcription: props.transcription,\n    russian: props.translation,\n    tags: []\n  });\n  const [errors, setErrors] = useState({\n    english: false,\n    transcription: false,\n    russian: false\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addInputData = event => {\n    setInputData({ ...inputData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const {\n    id,\n    english,\n    transcription,\n    russian\n  } = inputData;\n\n  const onlyLatinCharacters = value => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = value => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!pressed) {\n      handleChange();\n      return;\n    }\n\n    if (!onlyLatinCharacters(inputData.english)) {\n      setErrors({ ...errors,\n        english: \"Введите слово на английском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(inputData.russian)) {\n      setErrors({ ...errors,\n        russian: \"Введите слово на русском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      //     console.log(inputData.word);\n      //     console.log(inputData.transcription);\n      //     console.log(inputData.translation);\n      //     setErrors({\n      //       word: false,\n      //       transcription: false,\n      //       translation: false,\n      //     });\n      //     handleChange();\n      //   }\n      // };\n      fetch(`/api/words/${id}/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify(inputData)\n      }).then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(setErrors({\n        word: false,\n        transcription: false,\n        translation: false\n      })).then(data => {\n        console.log(data);\n        setInputData(data);\n        handleChange();\n      }).catch(err => console.log(err));\n    }\n  };\n\n  const handleDelete = id => {\n    fetch(`/api/words/${id}/delete`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      }\n    }).then(response => {\n      if (response.ok) {\n        //Проверяем что код ответа 200\n        return response.json();\n      } else {\n        throw new Error(\"Something went wrong ...\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"row\",\n    children: [pressed === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: english,\n          onChange: e => addInputData(e),\n          name: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: transcription,\n          onChange: e => addInputData(e),\n          name: \"transcription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: russian,\n          onChange: e => addInputData(e),\n          name: \"translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: inputData.english\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: inputData.transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: inputData.russian\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonEdit, {\n          onClick: handleSave,\n          pressed: pressed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonDel, {\n          onClick: () => handleDelete(id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, props.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TableRow, \"fD6xu5B7mPBdGETij2ZPyzT0s1w=\");\n\n_c = TableRow;\nexport default TableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableRow\");","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx"],"names":["React","useState","ButtonDel","ButtonEdit","TableRow","props","pressed","setPressed","inputData","setInputData","id","english","word","transcription","russian","translation","tags","errors","setErrors","handleChange","addInputData","event","target","name","value","onlyLatinCharacters","test","onlyRussianCharacters","handleSave","alert","fetch","method","headers","body","JSON","stringify","then","response","ok","json","Error","data","console","log","catch","err","handleDelete","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\n\nfunction TableRow(props) {\n  const [pressed, setPressed] = useState(false);\n\n  const [inputData, setInputData] = useState({\n    id: props.id,\n    english: props.word,\n    transcription: props.transcription,\n    russian: props.translation,\n    tags: [],\n  });\n\n  const [errors, setErrors] = useState({\n    english: false,\n    transcription: false,\n    russian: false,\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addInputData = (event) => {\n    setInputData({\n      ...inputData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const { id, english, transcription, russian } = inputData;\n\n  const onlyLatinCharacters = (value) => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = (value) => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!pressed) {\n      handleChange();\n      return;\n    }\n    if (!onlyLatinCharacters(inputData.english)) {\n      setErrors({ ...errors, english: \"Введите слово на английском языке\" });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(inputData.russian)) {\n      setErrors({ ...errors, russian: \"Введите слово на русском языке\" });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      //     console.log(inputData.word);\n      //     console.log(inputData.transcription);\n      //     console.log(inputData.translation);\n      //     setErrors({\n      //       word: false,\n      //       transcription: false,\n      //       translation: false,\n      //     });\n      //     handleChange();\n      //   }\n      // };\n\n      fetch(`/api/words/${id}/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify(inputData),\n      })\n        .then((response) => {\n          if (response.ok) {\n            //Проверяем что код ответа 200\n            return response.json();\n          } else {\n            throw new Error(\"Something went wrong ...\");\n          }\n        })\n        .then(\n          setErrors({\n            word: false,\n            transcription: false,\n            translation: false,\n          })\n        )\n        .then((data) => {\n          console.log(data);\n          setInputData(data);\n          handleChange();\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  const handleDelete = (id) => {\n    fetch(`/api/words/${id}/delete`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n    }).then((response) => {\n      if (response.ok) {\n        //Проверяем что код ответа 200\n        return response.json();\n      } else {\n        throw new Error(\"Something went wrong ...\");\n      }\n    });\n  };\n  return (\n    <tr className=\"row\" key={props.id}>\n      {pressed === true ? (\n        <>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={english}\n              onChange={(e) => addInputData(e)}\n              name=\"word\"\n            />\n          </td>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={transcription}\n              onChange={(e) => addInputData(e)}\n              name=\"transcription\"\n            />\n          </td>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={russian}\n              onChange={(e) => addInputData(e)}\n              name=\"translation\"\n            />\n          </td>\n        </>\n      ) : (\n        <>\n          <td className=\"row-word\" onClick={handleChange}>\n            {inputData.english}\n          </td>\n          <td className=\"row-word\" onClick={handleChange}>\n            {inputData.transcription}\n          </td>\n          <td className=\"row-word\" onClick={handleChange}>\n            {inputData.russian}\n          </td>\n        </>\n      )}\n      <td>\n        <div className=\"buttons\">\n          <ButtonEdit onClick={handleSave} pressed={pressed} />\n          <ButtonDel onClick={() => handleDelete(id)} />\n        </div>\n      </td>\n    </tr>\n  );\n}\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}