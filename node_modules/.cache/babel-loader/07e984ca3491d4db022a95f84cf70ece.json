{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/WordsList/EditableRow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./EditableRow.scss\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonAdd from \"../Buttons/ButtonAdd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditableRow(props) {\n  _s();\n\n  const [inputData, setInputData] = useState({\n    word: \"\",\n    transcription: \"\",\n    translation: \"\"\n  });\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false\n  });\n\n  const addInputData = event => {\n    setInputData({ ...inputData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const {\n    word,\n    transcription,\n    translation\n  } = imputData;\n\n  const onlyLatinCharacters = value => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = value => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(imputData.word)) {\n      setErrors({ ...errors,\n        word: \"Введите слово на английском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(imputData.translation)) {\n      setErrors({ ...errors,\n        translation: \"Введите слово на русском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      console.log(imputData.word);\n      console.log(imputData.transcription);\n      console.log(imputData.translation);\n      setErrors({\n        word: false,\n        transcription: false,\n        translation: false\n      });\n    }\n  };\n\n  const validate = () => {\n    const {\n      word,\n      transcription,\n      translation\n    } = imputData;\n    return word.trim() && transcription.trim() && translation.trim();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"rowAddWord\",\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: word,\n        onChange: e => addImputData(e),\n        name: \"word\",\n        className: word.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: transcription,\n        onChange: e => addImputData(e),\n        name: \"transcription\",\n        className: transcription.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter\",\n        type: \"text\",\n        value: translation,\n        onChange: e => addImputData(e),\n        name: \"translation\",\n        className: translation.length ? \"addWord\" : \"addWord-red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonAdd, {\n          disabled: !validate(),\n          save: handleSave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonDel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditableRow, \"MlDn7ksnKpPABNq9mTMSm5Zl9p0=\");\n\n_c = EditableRow;\nexport default EditableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableRow\");","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/WordsList/EditableRow.jsx"],"names":["React","useState","ButtonDel","ButtonAdd","EditableRow","props","inputData","setInputData","word","transcription","translation","errors","setErrors","addInputData","event","target","name","value","imputData","onlyLatinCharacters","test","onlyRussianCharacters","handleSave","alert","console","log","validate","trim","e","addImputData","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./EditableRow.scss\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonAdd from \"../Buttons/ButtonAdd\";\n\nfunction EditableRow(props) {\n  const [inputData, setInputData] = useState({\n    word: \"\",\n    transcription: \"\",\n    translation: \"\",\n  });\n\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false,\n  });\n\n  const addInputData = (event) => {\n    setInputData({\n      ...inputData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const { word, transcription, translation } = imputData;\n\n  const onlyLatinCharacters = (value) => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = (value) => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(imputData.word)) {\n      setErrors({ ...errors, word: \"Введите слово на английском языке\" });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(imputData.translation)) {\n      setErrors({ ...errors, translation: \"Введите слово на русском языке\" });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      console.log(imputData.word);\n      console.log(imputData.transcription);\n      console.log(imputData.translation);\n      setErrors({\n        word: false,\n        transcription: false,\n        translation: false,\n      });\n    }\n  };\n\n  const validate = () => {\n    const { word, transcription, translation } = imputData;\n    return word.trim() && transcription.trim() && translation.trim();\n  };\n\n  return (\n    <tr className=\"rowAddWord\">\n      <td>\n        <input\n          placeholder=\"Enter\"\n          type=\"text\"\n          value={word}\n          onChange={(e) => addImputData(e)}\n          name=\"word\"\n          className={word.length ? \"addWord\" : \"addWord-red\"}\n        />\n      </td>\n      <td>\n        <input\n          placeholder=\"Enter\"\n          type=\"text\"\n          value={transcription}\n          onChange={(e) => addImputData(e)}\n          name=\"transcription\"\n          className={transcription.length ? \"addWord\" : \"addWord-red\"}\n        />\n      </td>\n      <td>\n        <input\n          placeholder=\"Enter\"\n          type=\"text\"\n          value={translation}\n          onChange={(e) => addImputData(e)}\n          name=\"translation\"\n          className={translation.length ? \"addWord\" : \"addWord-red\"}\n        />\n      </td>\n      <td>\n        <div className=\"buttons\">\n          <ButtonAdd disabled={!validate()} save={handleSave} />\n          <ButtonDel />\n        </div>\n      </td>\n    </tr>\n  );\n}\n\nexport default EditableRow;\n"]},"metadata":{},"sourceType":"module"}