{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/CardContainer/CardContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport Card from \"../Card/Card\";\nimport ButtonPrevious from \"../ButtonPrevious/ButtonPrevious\";\nimport ButtonNext from \"../ButtonNext/ButtonNext\";\nimport \"./CardContainer.scss\";\nimport { observer, inject } from \"mobx-react\"; // const words = [\n//   {\n//     id: \"peace\",\n//     english: \"peace\",\n//     transcription: \"[ piːs ]\",\n//     russian: \"мир\",\n//     isTranslationShow: false,\n//   },\n//   {\n//     id: \"friendship\",\n//     english: \"friendship\",\n//     transcription: \"[ ˈfrendʃɪp ]\",\n//     russian: \"дружба\",\n//     isTranslationShow: false,\n//   },\n//   {\n//     id: \"gum\",\n//     english: \"gum\",\n//     transcription: \"[ ɡʌm ]\",\n//     russian: \"жвачка\",\n//     isTranslationShow: false,\n//   },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardContainer = inject([\"dataStore\"])(observer(_s(_ref => {\n  _s();\n\n  let {\n    dataStore\n  } = _ref;\n  const [selectedCardIndex, setSelectedCardIndex] = useState(0);\n  const [data, updateTranslationState] = useState(dataStore.data);\n  const [wordsCount, setWordsCount] = useState(0);\n\n  const handleClickNext = () => {\n    const newIdx = selectedCardIndex + 1;\n\n    if (newIdx < dataStore.data.length) {\n      setSelectedCardIndex(newIdx);\n    }\n  };\n\n  const handleClickPrev = () => {\n    const newIndex = selectedCardIndex - 1;\n\n    if (newIndex >= 0) {\n      setSelectedCardIndex(newIndex);\n    }\n  };\n\n  const addToWords = useCallback(() => setWordsCount(wordsCount + 1), [wordsCount]);\n\n  const handleClickTranslation = isTranslationShown => {\n    const dataCopy = [...data];\n    dataCopy[selectedCardIndex].isTranslationShow = !dataCopy[selectedCardIndex].isTranslationShow;\n    updateTranslationState(dataCopy);\n\n    if (!isTranslationShown) {\n      addToWords();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"wordsCount\",\n      children: [\" \\u0438\\u0437\\u0443\\u0447\\u0435\\u043D\\u043E \", wordsCount, \" \\u0441\\u043B\\u043E\\u0432\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"oneCard\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonPrevious, {\n        onClick: handleClickPrev,\n        disabled: selectedCardIndex === 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        word: data[selectedCardIndex].english,\n        transcription: dataStore.data[selectedCardIndex].transcription,\n        translation: dataStore.data[selectedCardIndex].russian,\n        onClick: () => handleClickTranslation(data[selectedCardIndex].isTranslationShow),\n        isTranslationShown: data[selectedCardIndex].isTranslationShow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonNext, {\n        onClick: handleClickNext,\n        disabled: selectedCardIndex === dataStore.words.length - 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"numberCard\",\n      children: [selectedCardIndex + 1, \"/\", dataStore.words.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 7\n  }, this);\n}, \"0syMyEMMExOdedpCcqqTQr7LWjk=\")));\nexport default CardContainer;","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/CardContainer/CardContainer.jsx"],"names":["React","useState","useCallback","Card","ButtonPrevious","ButtonNext","observer","inject","CardContainer","dataStore","selectedCardIndex","setSelectedCardIndex","data","updateTranslationState","wordsCount","setWordsCount","handleClickNext","newIdx","length","handleClickPrev","newIndex","addToWords","handleClickTranslation","isTranslationShown","dataCopy","isTranslationShow","english","transcription","russian","words"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport Card from \"../Card/Card\";\nimport ButtonPrevious from \"../ButtonPrevious/ButtonPrevious\";\nimport ButtonNext from \"../ButtonNext/ButtonNext\";\nimport \"./CardContainer.scss\";\nimport { observer, inject } from \"mobx-react\";\n\n// const words = [\n//   {\n//     id: \"peace\",\n//     english: \"peace\",\n//     transcription: \"[ piːs ]\",\n//     russian: \"мир\",\n//     isTranslationShow: false,\n//   },\n//   {\n//     id: \"friendship\",\n//     english: \"friendship\",\n//     transcription: \"[ ˈfrendʃɪp ]\",\n//     russian: \"дружба\",\n//     isTranslationShow: false,\n//   },\n\n//   {\n//     id: \"gum\",\n//     english: \"gum\",\n//     transcription: \"[ ɡʌm ]\",\n//     russian: \"жвачка\",\n//     isTranslationShow: false,\n//   },\n// ];\n\nconst CardContainer = inject([\"dataStore\"])(\n  observer(({ dataStore }) => {\n    const [selectedCardIndex, setSelectedCardIndex] = useState(0);\n    const [data, updateTranslationState] = useState(dataStore.data);\n    const [wordsCount, setWordsCount] = useState(0);\n\n    const handleClickNext = () => {\n      const newIdx = selectedCardIndex + 1;\n      if (newIdx < dataStore.data.length) {\n        setSelectedCardIndex(newIdx);\n      }\n    };\n\n    const handleClickPrev = () => {\n      const newIndex = selectedCardIndex - 1;\n      if (newIndex >= 0) {\n        setSelectedCardIndex(newIndex);\n      }\n    };\n\n    const addToWords = useCallback(\n      () => setWordsCount(wordsCount + 1),\n      [wordsCount]\n    );\n\n    const handleClickTranslation = (isTranslationShown) => {\n      const dataCopy = [...data];\n      dataCopy[selectedCardIndex].isTranslationShow =\n        !dataCopy[selectedCardIndex].isTranslationShow;\n      updateTranslationState(dataCopy);\n      if (!isTranslationShown) {\n        addToWords();\n      }\n    };\n\n    return (\n      <div className=\"cardContainer\">\n        <span className=\"wordsCount\"> изучено {wordsCount} слов</span>\n        <div className=\"oneCard\">\n          <ButtonPrevious\n            onClick={handleClickPrev}\n            disabled={selectedCardIndex === 0}\n          />\n          <Card\n            word={data[selectedCardIndex].english}\n            transcription={dataStore.data[selectedCardIndex].transcription}\n            translation={dataStore.data[selectedCardIndex].russian}\n            onClick={() =>\n              handleClickTranslation(data[selectedCardIndex].isTranslationShow)\n            }\n            isTranslationShown={data[selectedCardIndex].isTranslationShow}\n          ></Card>\n          <ButtonNext\n            onClick={handleClickNext}\n            disabled={selectedCardIndex === dataStore.words.length - 1}\n          />\n        </div>\n        <span className=\"numberCard\">\n          {selectedCardIndex + 1}/{dataStore.words.length}\n        </span>\n      </div>\n    );\n  })\n);\n\nexport default CardContainer;\n"]},"metadata":{},"sourceType":"module"}