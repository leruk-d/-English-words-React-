{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TableRow(props) {\n  _s();\n\n  const [pressed, setPressed] = useState(false);\n  const [imputData, setImputData] = useState({\n    id: props.id,\n    word: props.word,\n    transcription: props.transcription,\n    translation: props.translation\n  });\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addImputData = event => {\n    setImputData({ ...imputData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const {\n    id,\n    word,\n    transcription,\n    translation\n  } = imputData;\n\n  const onlyLatinCharacters = value => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = value => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(imputData.word)) {\n      setErrors({ ...errors,\n        word: \"Введите слово на английском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(imputData.translation)) {\n      setErrors({ ...errors,\n        translation: \"Введите слово на русском языке\"\n      });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      //     console.log(imputData.word);\n      //     console.log(imputData.transcription);\n      //     console.log(imputData.translation);\n      //     setErrors({\n      //       word: false,\n      //       transcription: false,\n      //       translation: false,\n      //     });\n      //     handleChange();\n      //   }\n      // };\n      fetch(`/api/words/${id}/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify({\n          english: imputData.word,\n          russian: imputData.translation,\n          transcription: imputData.transcription,\n          tags: []\n        })\n      }).then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        setImputData(data);\n      }).catch(err => console.log(err));\n    }\n  };\n\n  const handleDelete = id => {\n    fetch(`/api/words/${imputData.id}/delete`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      }\n    }).then(response => {\n      if (response.ok) {\n        //Проверяем что код ответа 200\n        return response.json();\n      } else {\n        throw new Error(\"Something went wrong ...\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"row\",\n    children: [pressed === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: word,\n          onChange: e => addImputData(e),\n          name: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: transcription,\n          onChange: e => addImputData(e),\n          name: \"transcription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"row-input\",\n          type: \"text\",\n          value: translation,\n          onChange: e => addImputData(e),\n          name: \"translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: imputData.word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: imputData.transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"row-word\",\n        onClick: handleChange,\n        children: imputData.translation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonEdit, {\n          onClick: handleSave,\n          pressed: pressed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonDel, {\n          onClick: () => handleDelete(id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, props.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TableRow, \"2CQPLrHuluAbKgrpXAUF70FbxsU=\");\n\n_c = TableRow;\nexport default TableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableRow\");","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/WordsList/TableRow.jsx"],"names":["React","useState","ButtonDel","ButtonEdit","TableRow","props","pressed","setPressed","imputData","setImputData","id","word","transcription","translation","errors","setErrors","handleChange","addImputData","event","target","name","value","onlyLatinCharacters","test","onlyRussianCharacters","handleSave","alert","fetch","method","headers","body","JSON","stringify","english","russian","tags","then","response","ok","json","Error","data","catch","err","console","log","handleDelete","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ButtonDel from \"../Buttons/ButtonDelete\";\nimport ButtonEdit from \"../Buttons/ButtonEdit\";\nimport \"./TableRow.scss\";\n\nfunction TableRow(props) {\n  const [pressed, setPressed] = useState(false);\n\n  const [imputData, setImputData] = useState({\n    id: props.id,\n    word: props.word,\n    transcription: props.transcription,\n    translation: props.translation,\n  });\n\n  const [errors, setErrors] = useState({\n    word: false,\n    transcription: false,\n    translation: false,\n  });\n\n  const handleChange = () => {\n    setPressed(!pressed);\n  };\n\n  const addImputData = (event) => {\n    setImputData({\n      ...imputData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const { id, word, transcription, translation } = imputData;\n\n  const onlyLatinCharacters = (value) => {\n    return /^[a-zA-Z]+$/.test(value);\n  };\n\n  const onlyRussianCharacters = (value) => {\n    return /^[\\u0400-\\u04FF]+$/.test(value);\n  };\n\n  const handleSave = () => {\n    if (!onlyLatinCharacters(imputData.word)) {\n      setErrors({ ...errors, word: \"Введите слово на английском языке\" });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else if (!onlyRussianCharacters(imputData.translation)) {\n      setErrors({ ...errors, translation: \"Введите слово на русском языке\" });\n      alert(\"Некоторые поля заполнены неправильно!\");\n    } else {\n      //     console.log(imputData.word);\n      //     console.log(imputData.transcription);\n      //     console.log(imputData.translation);\n      //     setErrors({\n      //       word: false,\n      //       transcription: false,\n      //       translation: false,\n      //     });\n      //     handleChange();\n      //   }\n      // };\n\n      fetch(`/api/words/${id}/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify({\n          english: imputData.word,\n          russian: imputData.translation,\n          transcription: imputData.transcription,\n          tags: [],\n        }),\n      })\n        .then((response) => {\n          if (response.ok) {\n            //Проверяем что код ответа 200\n            return response.json();\n          } else {\n            throw new Error(\"Something went wrong ...\");\n          }\n        })\n        .then((data) => {\n          setImputData(data);\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  const handleDelete = (id) => {\n    fetch(`/api/words/${imputData.id}/delete`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n    }).then((response) => {\n      if (response.ok) {\n        //Проверяем что код ответа 200\n        return response.json();\n      } else {\n        throw new Error(\"Something went wrong ...\");\n      }\n    });\n  };\n  return (\n    <tr className=\"row\" key={props.id}>\n      {pressed === true ? (\n        <>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={word}\n              onChange={(e) => addImputData(e)}\n              name=\"word\"\n            />\n          </td>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={transcription}\n              onChange={(e) => addImputData(e)}\n              name=\"transcription\"\n            />\n          </td>\n          <td>\n            <input\n              className=\"row-input\"\n              type=\"text\"\n              value={translation}\n              onChange={(e) => addImputData(e)}\n              name=\"translation\"\n            />\n          </td>\n        </>\n      ) : (\n        <>\n          <td className=\"row-word\" onClick={handleChange}>\n            {imputData.word}\n          </td>\n          <td className=\"row-word\" onClick={handleChange}>\n            {imputData.transcription}\n          </td>\n          <td className=\"row-word\" onClick={handleChange}>\n            {imputData.translation}\n          </td>\n        </>\n      )}\n      <td>\n        <div className=\"buttons\">\n          <ButtonEdit onClick={handleSave} pressed={pressed} />\n          <ButtonDel onClick={() => handleDelete(id)} />\n        </div>\n      </td>\n    </tr>\n  );\n}\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}