{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/components/CardContainer/CardContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Card from \"../Card/Card\";\nimport ButtonPrevious from \"../ButtonPrevious/ButtonPrevious\";\nimport ButtonNext from \"../ButtonNext/ButtonNext\";\nimport \"./CardContainer.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst words = [{\n  id: \"peace\",\n  english: \"peace\",\n  transcription: \"[ piːs ]\",\n  russian: \"мир\",\n  isTranslationShow: false\n}, {\n  id: \"friendship\",\n  english: \"friendship\",\n  transcription: \"[ ˈfrendʃɪp ]\",\n  russian: \"дружба\",\n  isTranslationShow: false\n}, {\n  id: \"gum\",\n  english: \"gum\",\n  transcription: \"[ ɡʌm ]\",\n  russian: \"жвачка\",\n  isTranslationShow: false\n}];\n\nfunction CardContainer(props) {\n  _s();\n\n  const [selectedCardIndex, setSelectedCardIndex] = useState(0);\n  const [data, updateTranslationState] = useState(words);\n  const [wordsCount, setWordsCount] = useState(0);\n\n  const handleClickNext = () => {\n    const newIdx = selectedCardIndex + 1;\n\n    if (newIdx < words.length) {\n      setSelectedCardIndex(newIdx);\n    }\n  };\n\n  const handleClickPrev = () => {\n    const newIndex = selectedCardIndex - 1;\n\n    if (newIndex >= 0) {\n      setSelectedCardIndex(newIndex);\n    }\n  };\n\n  const addToWords = useCallback(() => setWordsCount(wordsCount + 1), [wordsCount]);\n\n  const handleClickTranslation = isTranslationShown => {\n    const dataCopy = [...data];\n    dataCopy[selectedCardIndex].isTranslationShow = !dataCopy[selectedCardIndex].isTranslationShow;\n    updateTranslationState(dataCopy);\n\n    if (!isTranslationShown) {\n      addToWords();\n    }\n  };\n\n  useEffect(() => {\n    console.log(words.length);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" \\u0438\\u0437\\u0443\\u0447\\u0435\\u043D\\u043E \", wordsCount, \" \\u0441\\u043B\\u043E\\u0432\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"oneCard\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonPrevious, {\n        onClick: handleClickPrev,\n        disabled: selectedCardIndex === 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        word: words[selectedCardIndex].english,\n        transcription: words[selectedCardIndex].transcription,\n        translation: words[selectedCardIndex].russian,\n        onClick: () => handleClickTranslation(data[selectedCardIndex].isTranslationShow),\n        isTranslationShown: data[selectedCardIndex].isTranslationShow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonNext, {\n        onClick: handleClickNext,\n        disabled: selectedCardIndex === words.length - 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"numberCard\",\n      children: [selectedCardIndex + 1, \"/\", words.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CardContainer, \"VRIpir8kwW2rEWCrZleHed1zHG4=\");\n\n_c = CardContainer;\nexport default CardContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardContainer\");","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/components/CardContainer/CardContainer.jsx"],"names":["React","useState","useEffect","useCallback","Card","ButtonPrevious","ButtonNext","words","id","english","transcription","russian","isTranslationShow","CardContainer","props","selectedCardIndex","setSelectedCardIndex","data","updateTranslationState","wordsCount","setWordsCount","handleClickNext","newIdx","length","handleClickPrev","newIndex","addToWords","handleClickTranslation","isTranslationShown","dataCopy","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAO,sBAAP;;AAEA,MAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,EAAE,EAAE,OADN;AAEEC,EAAAA,OAAO,EAAE,OAFX;AAGEC,EAAAA,aAAa,EAAE,UAHjB;AAIEC,EAAAA,OAAO,EAAE,KAJX;AAKEC,EAAAA,iBAAiB,EAAE;AALrB,CADY,EAQZ;AACEJ,EAAAA,EAAE,EAAE,YADN;AAEEC,EAAAA,OAAO,EAAE,YAFX;AAGEC,EAAAA,aAAa,EAAE,eAHjB;AAIEC,EAAAA,OAAO,EAAE,QAJX;AAKEC,EAAAA,iBAAiB,EAAE;AALrB,CARY,EAgBZ;AACEJ,EAAAA,EAAE,EAAE,KADN;AAEEC,EAAAA,OAAO,EAAE,KAFX;AAGEC,EAAAA,aAAa,EAAE,SAHjB;AAIEC,EAAAA,OAAO,EAAE,QAJX;AAKEC,EAAAA,iBAAiB,EAAE;AALrB,CAhBY,CAAd;;AAyBA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC5B,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4Cf,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM,CAACgB,IAAD,EAAOC,sBAAP,IAAiCjB,QAAQ,CAACM,KAAD,CAA/C;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,CAAD,CAA5C;;AAEA,QAAMoB,eAAe,GAAG,MAAM;AAC5B,UAAMC,MAAM,GAAGP,iBAAiB,GAAG,CAAnC;;AACA,QAAIO,MAAM,GAAGf,KAAK,CAACgB,MAAnB,EAA2B;AACzBP,MAAAA,oBAAoB,CAACM,MAAD,CAApB;AACD;AACF,GALD;;AAOA,QAAME,eAAe,GAAG,MAAM;AAC5B,UAAMC,QAAQ,GAAGV,iBAAiB,GAAG,CAArC;;AACA,QAAIU,QAAQ,IAAI,CAAhB,EAAmB;AACjBT,MAAAA,oBAAoB,CAACS,QAAD,CAApB;AACD;AACF,GALD;;AAOA,QAAMC,UAAU,GAAGvB,WAAW,CAC5B,MAAMiB,aAAa,CAACD,UAAU,GAAG,CAAd,CADS,EAE5B,CAACA,UAAD,CAF4B,CAA9B;;AAKA,QAAMQ,sBAAsB,GAAIC,kBAAD,IAAwB;AACrD,UAAMC,QAAQ,GAAG,CAAC,GAAGZ,IAAJ,CAAjB;AACAY,IAAAA,QAAQ,CAACd,iBAAD,CAAR,CAA4BH,iBAA5B,GACE,CAACiB,QAAQ,CAACd,iBAAD,CAAR,CAA4BH,iBAD/B;AAEAM,IAAAA,sBAAsB,CAACW,QAAD,CAAtB;;AACA,QAAI,CAACD,kBAAL,EAAyB;AACvBF,MAAAA,UAAU;AACX;AACF,GARD;;AAUAxB,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAK,CAACgB,MAAlB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACE;AAAA,iEAAgBJ,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE,QAAC,cAAD;AACE,QAAA,OAAO,EAAEK,eADX;AAEE,QAAA,QAAQ,EAAET,iBAAiB,KAAK;AAFlC;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,IAAD;AACE,QAAA,IAAI,EAAER,KAAK,CAACQ,iBAAD,CAAL,CAAyBN,OADjC;AAEE,QAAA,aAAa,EAAEF,KAAK,CAACQ,iBAAD,CAAL,CAAyBL,aAF1C;AAGE,QAAA,WAAW,EAAEH,KAAK,CAACQ,iBAAD,CAAL,CAAyBJ,OAHxC;AAIE,QAAA,OAAO,EAAE,MACPgB,sBAAsB,CAACV,IAAI,CAACF,iBAAD,CAAJ,CAAwBH,iBAAzB,CAL1B;AAOE,QAAA,kBAAkB,EAAEK,IAAI,CAACF,iBAAD,CAAJ,CAAwBH;AAP9C;AAAA;AAAA;AAAA;AAAA,cALF,eAcE,QAAC,UAAD;AACE,QAAA,OAAO,EAAES,eADX;AAEE,QAAA,QAAQ,EAAEN,iBAAiB,KAAKR,KAAK,CAACgB,MAAN,GAAe;AAFjD;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAqBE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA,iBACGR,iBAAiB,GAAG,CADvB,OAC2BR,KAAK,CAACgB,MADjC;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GAjEQV,a;;KAAAA,a;AAmET,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Card from \"../Card/Card\";\nimport ButtonPrevious from \"../ButtonPrevious/ButtonPrevious\";\nimport ButtonNext from \"../ButtonNext/ButtonNext\";\nimport \"./CardContainer.scss\";\n\nconst words = [\n  {\n    id: \"peace\",\n    english: \"peace\",\n    transcription: \"[ piːs ]\",\n    russian: \"мир\",\n    isTranslationShow: false,\n  },\n  {\n    id: \"friendship\",\n    english: \"friendship\",\n    transcription: \"[ ˈfrendʃɪp ]\",\n    russian: \"дружба\",\n    isTranslationShow: false,\n  },\n\n  {\n    id: \"gum\",\n    english: \"gum\",\n    transcription: \"[ ɡʌm ]\",\n    russian: \"жвачка\",\n    isTranslationShow: false,\n  },\n];\n\nfunction CardContainer(props) {\n  const [selectedCardIndex, setSelectedCardIndex] = useState(0);\n  const [data, updateTranslationState] = useState(words);\n  const [wordsCount, setWordsCount] = useState(0);\n\n  const handleClickNext = () => {\n    const newIdx = selectedCardIndex + 1;\n    if (newIdx < words.length) {\n      setSelectedCardIndex(newIdx);\n    }\n  };\n\n  const handleClickPrev = () => {\n    const newIndex = selectedCardIndex - 1;\n    if (newIndex >= 0) {\n      setSelectedCardIndex(newIndex);\n    }\n  };\n\n  const addToWords = useCallback(\n    () => setWordsCount(wordsCount + 1),\n    [wordsCount]\n  );\n\n  const handleClickTranslation = (isTranslationShown) => {\n    const dataCopy = [...data];\n    dataCopy[selectedCardIndex].isTranslationShow =\n      !dataCopy[selectedCardIndex].isTranslationShow;\n    updateTranslationState(dataCopy);\n    if (!isTranslationShown) {\n      addToWords();\n    }\n  };\n\n  useEffect(() => {\n    console.log(words.length);\n  }, []);\n\n  return (\n    <div className=\"cardContainer\">\n      <span> изучено {wordsCount} слов</span>\n      <div className=\"oneCard\">\n        <ButtonPrevious\n          onClick={handleClickPrev}\n          disabled={selectedCardIndex === 0}\n        />\n        <Card\n          word={words[selectedCardIndex].english}\n          transcription={words[selectedCardIndex].transcription}\n          translation={words[selectedCardIndex].russian}\n          onClick={() =>\n            handleClickTranslation(data[selectedCardIndex].isTranslationShow)\n          }\n          isTranslationShown={data[selectedCardIndex].isTranslationShow}\n        ></Card>\n        <ButtonNext\n          onClick={handleClickNext}\n          disabled={selectedCardIndex === words.length - 1}\n        />\n      </div>\n      <span className=\"numberCard\">\n        {selectedCardIndex + 1}/{words.length}\n      </span>\n    </div>\n  );\n}\n\nexport default CardContainer;\n"]},"metadata":{},"sourceType":"module"}