{"ast":null,"code":"import _initializerDefineProperty from \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;\n\nimport { action, observable } from \"mobx\";\nlet DataStore = (_class = class DataStore {\n  constructor() {\n    _initializerDefineProperty(this, \"data\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"isLoading\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"error\", _descriptor3, this);\n\n    this.loadData = () => {\n      fetch(\"/api/words\").then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(response => this.data = response);\n    };\n\n    _initializerDefineProperty(this, \"addNewWord\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"deleteWord\", _descriptor5, this);\n\n    this.updateWord = inputData => {\n      fetch(`/api/words/${inputData.id}/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify(inputData)\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(() => {\n        this.loadData();\n      });\n    };\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"error\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"addNewWord\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return inputData => {\n      fetch(\"/api/words/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify({\n          english: inputData.word,\n          russian: inputData.translation,\n          transcription: inputData.transcription,\n          tags: []\n        })\n      }).then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(() => {\n        this.loadData();\n      });\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"deleteWord\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      fetch(`http://itgirlschool.justmakeit.ru/api/words/${id}/delete`, {\n        method: \"POST\"\n      }).then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(() => {\n        this.loadData();\n      });\n    };\n  }\n})), _class);\nexport default DataStore;","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/stores/DataStore.js"],"names":["action","observable","DataStore","loadData","fetch","then","response","ok","json","Error","data","updateWord","inputData","id","method","headers","body","JSON","stringify","english","word","russian","translation","transcription","tags"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,MAAnC;IAEMC,S,aAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA;;AAAA;;AAAA;;AAAA,SAKdC,QALc,GAKH,MAAM;AACfC,MAAAA,KAAK,CAAC,YAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf;AACA,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAHD,MAGO;AACL,gBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,OARH,EASGJ,IATH,CASSC,QAAD,IAAe,KAAKI,IAAL,GAAYJ,QATnC;AAUD,KAhBa;;AAAA;;AAAA;;AAAA,SA8DdK,UA9Dc,GA8DAC,SAAD,IAAe;AAC1BR,MAAAA,KAAK,CAAE,cAAaQ,SAAS,CAACC,EAAG,SAA5B,EAAsC;AACzCC,QAAAA,MAAM,EAAE,MADiC;AAEzCC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFgC;AAKzCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,SAAf;AALmC,OAAtC,CAAL,CAOGP,IAPH,CAOSC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAFD,MAEO;AACL,gBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,OAbH,EAeGJ,IAfH,CAeQ,MAAM;AACV,aAAKF,QAAL;AACD,OAjBH;AAkBD,KAjFa;AAAA;;AAAA,C,sEACbF,U;;;;;WAAkB,E;;6EAClBA,U;;;;;WAAuB,K;;yEACvBA,U;;;;;WAAmB,I;;8EAenBD,M;;;;;WACaY,SAAD,IAAe;AAC1BR,MAAAA,KAAK,CAAC,gBAAD,EAAmB;AACtBU,QAAAA,MAAM,EAAE,MADc;AAEtBC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFa;AAKtBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,OAAO,EAAEP,SAAS,CAACQ,IADA;AAEnBC,UAAAA,OAAO,EAAET,SAAS,CAACU,WAFA;AAGnBC,UAAAA,aAAa,EAAEX,SAAS,CAACW,aAHN;AAInBC,UAAAA,IAAI,EAAE;AAJa,SAAf;AALgB,OAAnB,CAAL,CAYGnB,IAZH,CAYSC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf;AACA,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAHD,MAGO;AACL,gBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,OAnBH,EAoBGJ,IApBH,CAoBQ,MAAM;AACV,aAAKF,QAAL;AACD,OAtBH;AAuBD,K;;8EAEAH,M;;;;;WAAqBa,EAAD,IAAQ;AAC3BT,MAAAA,KAAK,CAAE,+CAA8CS,EAAG,SAAnD,EAA6D;AAChEC,QAAAA,MAAM,EAAE;AADwD,OAA7D,CAAL,CAGGT,IAHH,CAGSC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf;AACA,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAHD,MAGO;AACL,gBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,OAVH,EAWGJ,IAXH,CAWQ,MAAM;AACV,aAAKF,QAAL;AACD,OAbH;AAcD,K;;;AAwBH,eAAeD,SAAf","sourcesContent":["import { action, observable } from \"mobx\";\n\nclass DataStore {\n  @observable data = [];\n  @observable isLoading = false;\n  @observable error = null;\n\n  loadData = () => {\n    fetch(\"/api/words\")\n      .then((response) => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n      .then((response) => (this.data = response));\n  };\n\n  @action\n  addNewWord = (inputData) => {\n    fetch(\"/api/words/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify({\n        english: inputData.word,\n        russian: inputData.translation,\n        transcription: inputData.transcription,\n        tags: [],\n      }),\n    })\n      .then((response) => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n      .then(() => {\n        this.loadData();\n      });\n  };\n\n  @action deleteWord = (id) => {\n    fetch(`http://itgirlschool.justmakeit.ru/api/words/${id}/delete`, {\n      method: \"POST\",\n    })\n      .then((response) => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n      .then(() => {\n        this.loadData();\n      });\n  };\n\n  updateWord = (inputData) => {\n    fetch(`/api/words/${inputData.id}/update`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify(inputData),\n    })\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n\n      .then(() => {\n        this.loadData();\n      });\n  };\n}\n\nexport default DataStore;\n"]},"metadata":{},"sourceType":"module"}