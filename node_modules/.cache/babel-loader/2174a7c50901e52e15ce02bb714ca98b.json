{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\n\nclass DataStore {\n  constructor() {\n    this.data = [];\n    this.isLoading = false;\n    this.error = null;\n\n    this.loadData = () => {\n      fetch(\"/api/words\").then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(response => this.data = response);\n    };\n\n    this.addNewWord = inputData => {\n      return fetch(\"/api/words/add\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify({\n          english: inputData.word,\n          russian: inputData.translation,\n          transcription: inputData.transcription,\n          tags: []\n        })\n      }).then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(res => {\n        this.data.push(res);\n      });\n    };\n\n    this.deleteWord = id => {\n      this.isLoading = true;\n      fetch(`/api/words/${id}/delete`, {\n        method: \"POST\"\n      }).then(response => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(response => this.data = response);\n      this.isLoading = false;\n    };\n\n    this.updateWord = (inputData, id) => {\n      fetch(`/api/words/${id}/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify({\n          english: inputData.word,\n          russian: inputData.translation,\n          transcription: inputData.transcription\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }); //   .then((response) => (this.data = response));\n    };\n\n    makeAutoObservable(this);\n    this.loadData();\n  }\n\n}\n\nexport default DataStore;","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/stores/DataStore.js"],"names":["makeAutoObservable","DataStore","constructor","data","isLoading","error","loadData","fetch","then","response","ok","json","Error","addNewWord","inputData","method","mode","headers","body","JSON","stringify","english","word","russian","translation","transcription","tags","res","push","deleteWord","id","updateWord"],"mappings":"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","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nclass DataStore {\n  data = [];\n  isLoading = false;\n  error = null;\n\n  constructor() {\n    makeAutoObservable(this);\n    this.loadData();\n  }\n\n  loadData = () => {\n    fetch(\"/api/words\")\n      .then((response) => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n      .then((response) => (this.data = response));\n  };\n\n  addNewWord = (inputData) => {\n    return fetch(\"/api/words/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify({\n        english: inputData.word,\n        russian: inputData.translation,\n        transcription: inputData.transcription,\n        tags: [],\n      }),\n    })\n      .then((response) => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n      .then((res) => {\n        this.data.push(res);\n      });\n  };\n\n  deleteWord = (id) => {\n    this.isLoading = true;\n    fetch(`/api/words/${id}/delete`, {\n      method: \"POST\",\n    })\n      .then((response) => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n      .then((response) => (this.data = response));\n    this.isLoading = false;\n  };\n\n  updateWord = (inputData, id) => {\n    fetch(`/api/words/${id}/update`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify({\n        english: inputData.word,\n        russian: inputData.translation,\n        transcription: inputData.transcription,\n      }),\n    }).then((response) => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(\"Something went wrong ...\");\n      }\n    });\n\n    //   .then((response) => (this.data = response));\n  };\n}\n\nexport default DataStore;\n"]},"metadata":{},"sourceType":"module"}