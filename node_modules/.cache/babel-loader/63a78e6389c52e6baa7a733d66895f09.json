{"ast":null,"code":"var _jsxFileName = \"/Volumes/Lera/\\u0423\\u0447\\u0435\\u0431\\u0430/-English-words-React-/myapp/src/Context/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Error from \"../components/Error/Error\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/React.createContext();\n\nfunction DataContextProvider(props) {\n  _s();\n\n  const [words, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const updateData = value => {\n    setData([...words, {\n      id: words.length + 1,\n      word: value\n    }]);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"/api/words\").then(response => {\n      if (response.ok) {\n        //Проверяем что код ответа 200\n        return response.json();\n      } else {\n        throw new Error(\"Something went wrong ...\");\n      }\n    }).then(data => {\n      setData(data);\n      setIsLoading(false);\n    }).catch(error => {\n      setIsLoading(false);\n      setError(error);\n    });\n  }, []); // Примечание: пустой массив зависимостей [] означает, что\n  // этот useEffect будет запущен один раз\n\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      words,\n      isLoading,\n      error\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DataContextProvider, \"nu6o4XF4abw+pLmvbL3Yvp1lcLI=\");\n\n_c = DataContextProvider;\nexport { DataContextProvider, DataContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"DataContextProvider\");","map":{"version":3,"sources":["/Volumes/Lera/Учеба/-English-words-React-/myapp/src/Context/Context.js"],"names":["React","useState","useEffect","Error","DataContext","createContext","DataContextProvider","props","words","setData","isLoading","setIsLoading","error","setError","updateData","value","id","length","word","fetch","then","response","ok","json","data","catch","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,2BAAlB;;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAClC,QAAM,CAACC,KAAD,EAAQC,OAAR,IAAmBR,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;;AACA,QAAMa,UAAU,GAAIC,KAAD,IAAW;AAC5BN,IAAAA,OAAO,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAAEQ,MAAAA,EAAE,EAAER,KAAK,CAACS,MAAN,GAAe,CAArB;AAAwBC,MAAAA,IAAI,EAAEH;AAA9B,KAAX,CAAD,CAAP;AACD,GAFD;;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAQ,IAAAA,KAAK,CAAC,YAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf;AACA,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAHD,MAGO;AACL,cAAM,IAAIpB,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,KARH,EASGiB,IATH,CASSI,IAAD,IAAU;AACdf,MAAAA,OAAO,CAACe,IAAD,CAAP;AACAb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAZH,EAaGc,KAbH,CAaUb,KAAD,IAAW;AAChBD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAhBH;AAiBD,GAnBQ,EAmBN,EAnBM,CAAT,CARkC,CA6BlC;AACA;;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAF;AAASE,MAAAA,SAAT;AAAoBE,MAAAA;AAApB,KAA7B;AAAA,cACGL,KAAK,CAACmB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GArCQpB,mB;;KAAAA,mB;AAuCT,SAASA,mBAAT,EAA8BF,WAA9B","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Error from \"../components/Error/Error\";\n\nconst DataContext = React.createContext();\n\nfunction DataContextProvider(props) {\n  const [words, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const updateData = (value) => {\n    setData([...words, { id: words.length + 1, word: value }]);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"/api/words\")\n      .then((response) => {\n        if (response.ok) {\n          //Проверяем что код ответа 200\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      })\n      .then((data) => {\n        setData(data);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setIsLoading(false);\n        setError(error);\n      });\n  }, []);\n\n  // Примечание: пустой массив зависимостей [] означает, что\n  // этот useEffect будет запущен один раз\n\n  return (\n    <DataContext.Provider value={{ words, isLoading, error }}>\n      {props.children}\n    </DataContext.Provider>\n  );\n}\n\nexport { DataContextProvider, DataContext };\n"]},"metadata":{},"sourceType":"module"}